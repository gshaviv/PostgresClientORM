{"schemaVersion":{"patch":0,"minor":3,"major":0},"hierarchy":{"paths":[["doc:\/\/PostgresClientORM\/documentation\/PostgresClientORM"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/PostgresClientORM\/documentation\/PostgresClientORM\/Migrations\/init()"]},{"title":"Instance Methods","identifiers":["doc:\/\/PostgresClientORM\/documentation\/PostgresClientORM\/Migrations\/add(_:block:)","doc:\/\/PostgresClientORM\/documentation\/PostgresClientORM\/Migrations\/perform()"]}],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Migrations"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"content":[{"type":"heading","text":"Overview","anchor":"overview","level":2},{"inlineContent":[{"type":"text","text":"Create an instance of the Migrations class, add the various migrations steps with the "},{"type":"codeVoice","code":"add"},{"type":"text","text":" function which receives a string with the migration step name and a block to execute. Finally call the "},{"type":"codeVoice","code":"perform"},{"text":" func to perform the migrations.","type":"text"},{"type":"text","text":" "},{"text":"The class will create a ","type":"text"},{"code":"_migrations","type":"codeVoice"},{"text":" table if one does not exist to track which migrations were executed alrready and starts executing the migration steps in the order they were added starting from the first step that wasn’t executed yet. ","type":"text"},{"type":"codeVoice","code":".update(:)"},{"text":" the arugment being the new column type","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example:"}]},{"code":["  func migrate() async throws {","        let migrations = Migrations()","","        migrations.add(\"v1\") {","          try await table(\"t1\") {","              column(\"id\", type: .uuid).primaryKey()","              column(\"count\", type: .int).notNull()","          }","          .create()","        }","","        migrations.add(\"v2\") {","          try await table(\"t1\") {","               column(\"count\").drop()","               column(\"name, type: .string)","          }","          .update()","        }","","        try await migrations.perform()","  }"],"type":"codeListing","syntax":"Swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The modifiers that can be applied on a table are: "},{"code":".create()","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":".drop()"},{"type":"text","text":" and "},{"type":"codeVoice","code":".update()"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The modifiers that can be applied on a column in a table are: "},{"code":".primaryKey()","type":"codeVoice"},{"type":"text","text":", "},{"code":".notNull()","type":"codeVoice"},{"text":", ","type":"text"},{"code":".defaultValue(:)","type":"codeVoice"},{"text":" (with the default value given as the SQL string for that value,  ","type":"text"},{"type":"codeVoice","code":"rename(:)"},{"type":"text","text":" the argument being the new column name, "},{"code":".unique()","type":"codeVoice"},{"text":" sets a unique contraint on the column, ","type":"text"},{"type":"codeVoice","code":"references(table:column:onDelete)"},{"type":"text","text":" make the column a foreign key to specified column in specified talbe. the onDelete argument is what to do on delete (e.g. cascade, or not allow, etc)"}]},{"name":"Note","type":"aside","style":"note","content":[{"inlineContent":[{"text":"The best practice is to use strings for the table and column names in the migrations which wil make them work also in case the entity they represent was modified or deleted.","type":"text"}],"type":"paragraph"}]}],"kind":"content"}],"identifier":{"url":"doc:\/\/PostgresClientORM\/documentation\/PostgresClientORM\/Migrations","interfaceLanguage":"swift"},"kind":"symbol","metadata":{"role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"Migrations","kind":"identifier"}],"navigatorTitle":[{"text":"Migrations","kind":"identifier"}],"title":"Migrations","modules":[{"name":"PostgresClientORM"}],"symbolKind":"class","roleHeading":"Class","externalID":"s:17PostgresClientORM10MigrationsC"},"abstract":[{"type":"text","text":"Perform database migrations"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/postgresclientorm\/migrations"]}],"sections":[],"references":{"doc://PostgresClientORM/documentation/PostgresClientORM":{"type":"topic","identifier":"doc:\/\/PostgresClientORM\/documentation\/PostgresClientORM","title":"PostgresClientORM","role":"collection","url":"\/documentation\/postgresclientorm","kind":"symbol","abstract":[]},"doc://PostgresClientORM/documentation/PostgresClientORM/Migrations":{"navigatorTitle":[{"kind":"identifier","text":"Migrations"}],"title":"Migrations","kind":"symbol","url":"\/documentation\/postgresclientorm\/migrations","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Migrations"}],"abstract":[{"type":"text","text":"Perform database migrations"}],"type":"topic","identifier":"doc:\/\/PostgresClientORM\/documentation\/PostgresClientORM\/Migrations"},"doc://PostgresClientORM/documentation/PostgresClientORM/Migrations/init()":{"role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"()"}],"type":"topic","abstract":[],"kind":"symbol","identifier":"doc:\/\/PostgresClientORM\/documentation\/PostgresClientORM\/Migrations\/init()","url":"\/documentation\/postgresclientorm\/migrations\/init()","title":"init()"},"doc://PostgresClientORM/documentation/PostgresClientORM/Migrations/perform()":{"kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"perform","kind":"identifier"},{"text":"() ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"}],"abstract":[{"type":"text","text":"Perfrom all the migration steps that weren’t executed yet."}],"title":"perform()","identifier":"doc:\/\/PostgresClientORM\/documentation\/PostgresClientORM\/Migrations\/perform()","url":"\/documentation\/postgresclientorm\/migrations\/perform()","type":"topic"},"doc://PostgresClientORM/documentation/PostgresClientORM/Migrations/add(_:block:)":{"kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"add","kind":"identifier"},{"text":"(","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"block","kind":"externalParam"},{"text":": () ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"text":")","kind":"text"}],"abstract":[{"type":"text","text":"Add a migrations step"}],"title":"add(_:block:)","url":"\/documentation\/postgresclientorm\/migrations\/add(_:block:)","type":"topic","identifier":"doc:\/\/PostgresClientORM\/documentation\/PostgresClientORM\/Migrations\/add(_:block:)"}}}